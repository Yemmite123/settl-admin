{"version":3,"sources":["assets/img/icons/customercard.svg","requests/wallet-savings.js","pages/dashboards/Wallet Savings /Modal.js","pages/dashboards/Wallet Savings /CustomerDetails.js"],"names":["module","exports","create_UUID","dt","Date","getTime","replace","c","r","Math","random","floor","toString","requestId","WalletRequest","useSelector","state","user","details","token","tokenType","getAllWallets","days","a","axios","get","baseURL","params","headers","Authorization","response","data","refundAccount","post","reprocessTransaction","connect","userName","admin","fullname","email","show","setShow","transId","reload","useState","name","setName","reason","setReason","loading","setLoading","message","status","error","setError","walletRequest","handleChange","e","set","target","value","handleClick","preventDefault","title","adminFullName","split","adminEmail","code","console","log","fullName","Modal","centered","onHide","className","style","display","textAlign","borderBottom","padding","position","top","right","cursor","onClick","flexDirection","height","gap","margin","fontSize","Input","autoComplete","type","onChange","required","htmlFor","backgroundColor","resize","placeholder","marginTop","role","SuccessDialog","isOpen","toggle","CustomerDetails","setShowCustomerDetails","refund","reprocess","modalDetail","setModalDetail","customerData","transDomain","fundSource","transType","transEntry","transDate","to","customerId","useEffect","window","scrollTo","color","prev","src","logo","alt","transAmount","transStatus","Button","map","info","width","Object","keys","fontWeight","values"],"mappings":"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","file":"static/js/20.378d5289.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/customercard.1dd1f9d0.svg\";","import axios from \"axios\";\nimport baseURL from \"./baseUrl\";\nimport { useSelector } from \"react-redux\";\n\nfunction create_UUID() {\n  var dt = new Date().getTime();\n  var uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(\n    /[xy]/g,\n    function (c) {\n      var r = (dt + Math.random() * 16) % 16 | 0;\n      dt = Math.floor(dt / 16);\n      return (c === \"x\" ? r : (r & 0x3) | 0x8).toString(16);\n    }\n  );\n  return uuid;\n}\n\nlet requestId = create_UUID();\n\nconst WalletRequest = () => {\n  const { token, tokenType } = useSelector((state) => state.user.details);\n  const getAllWallets = async (days) => {\n    requestId = create_UUID();\n\n    try {\n      const response = await axios.get(\n        baseURL + `backoffice/Analytics/WalletSavings?days=${days}`,\n        {\n          params: {\n            days: 30,\n          },\n          headers: {\n            \"X-RequestId\": `${requestId}`,\n            Authorization: `${tokenType} ${token}`,\n          },\n        }\n      );\n      return response.data;\n    } catch (error) {\n      return error;\n    }\n  };\n\n  const refundAccount = async (data) => {\n    requestId = create_UUID();\n\n    try {\n      const response = await axios.post(\n        baseURL + \"backoffice/Customers/Refund\",\n        data,\n        {\n          headers: {\n            \"X-RequestId\": `${requestId}`,\n            Authorization: `${tokenType} ${token}`,\n          },\n        }\n      );\n      return response.data;\n    } catch (error) {\n      return error;\n    }\n  };\n\n  const reprocessTransaction = async (data) => {\n    requestId = create_UUID();\n\n    try {\n      const response = await axios.post(\n        baseURL + \"backoffice/Customers/ReprocessTransaction\",\n        data,\n        {\n          headers: {\n            \"X-RequestId\": `${requestId}`,\n            Authorization: `${tokenType} ${token}`,\n          },\n        }\n      );\n      return response.data;\n    } catch (error) {\n      return error;\n    }\n  };\n\n  return {\n    getAllWallets,\n    refundAccount,\n    reprocessTransaction,\n  };\n};\n\nexport default WalletRequest;\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { ReactComponent as Close } from \"../../../BgImages/close.svg\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { Input } from \"reactstrap\";\nimport walletRequest from \"../../../requests/wallet-savings\";\nimport SuccessDialog from \"../../SuccessDialog\";\nconst ReportsModal = ({ show, setShow, data, transId, userName, email, reload }) => {\n  const [name, setName] = useState(\"Assurance Uwangue\");\n  const [reason, setReason] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const [error, setError] = useState({\n    state: \"\",\n    message: \"\",\n    status: \"\"\n  });\n\n  const closeError = () => {\n    setError({\n      state: false,\n      message: \"\",\n      status: \"\",\n    });\n  };\n\n  const { refundAccount, reprocessTransaction } = walletRequest();\n  \n  const handleChange = (e, set) => {\n    const { value } = e.target;\n    set(value);\n  };\n\n  const handleClick = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    if (data.title === \"Refund Customer\") {\n      const response = await refundAccount({\n        adminFullName: userName.split(\" \")[0],\n        adminEmail: email,\n        reason: reason,\n        transId: transId\n      });\n      if(response.code === \"00\") {\n        console.log(response.data);\n        setLoading(false);\n        setShow(false);\n        return true;\n      }\n\n      setError({\n        state: true,\n        status: response.status,\n        message: response.message,\n      });\n    }\n\n    if (data.title === \"Reprocess Transaction\") {\n      const response = await reprocessTransaction({\n        fullName: userName.split(\" \")[0],\n        adminEmail: email,\n        reason: reason,\n        transId: transId\n      });\n      if(response.code === \"00\") {\n        console.log(response.data);\n        setShow(false);\n        return true;\n      }\n\n      setError({\n        state: true,\n        status: response.status,\n        message: response.message,\n      });\n    }\n\n    setLoading(false);\n    return false;\n  }\n\n  return (\n    <>\n      <Modal\n        show={show}\n        centered\n        onHide={() => setShow(false)}\n        className=\"transaction-modal\"\n      >\n        <div\n          style={{\n            display: \"relative\",\n          }}\n        >\n          <h3\n            style={{\n              textAlign: \"center\",\n              borderBottom: \"1px solid rgba(231, 231, 237, 0.6)\",\n              padding: \"1.5rem 0\",\n            }}\n          >\n            {data.title}\n          </h3>\n          <Close\n            style={{\n              position: \"absolute\",\n              top: \"20px\",\n              right: \"20px\",\n              cursor: \"pointer\",\n            }}\n            onClick={() => setShow(false)}\n          />\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: \"3rem 2rem\",\n            height: \"100%\",\n            gap: \"30px\",\n          }}\n        >\n          <p\n            style={{\n              textAlign: \"center\",\n              margin: \"0 auto\",\n              fontSize: \"16px\",\n            }}\n          >\n            Please confirm this is the right customer account before initiating\n            this process\n          </p>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              gap: \"20px\",\n            }}\n          >\n            <fieldset\n              className=\"float-label\"\n              style={{\n                margin: \"0\",\n              }}\n            >\n              <Input\n                name=\"name\"\n                autoComplete=\"off\"\n                type=\"text\"\n                className=\"form-control shadow-none\"\n                value={name}\n                style={{\n                  margin: \"0\",\n                }}\n                onChange={(e) => handleChange(e, setName)}\n                required\n              />\n              <label htmlFor=\"Full_Name\">Admin Full Name</label>\n            </fieldset>\n            <Input\n              type=\"textarea\"\n              className=\"form-control shadow-none\"\n              style={{\n                backgroundColor: \"#FAFAFA\",\n                resize: \"none\",\n                height: \"200px\",\n                padding: \"20px\",\n              }}\n              value={reason}\n              onChange={(e) => handleChange(e, setReason)}\n              placeholder={data.reason}\n              required\n            />\n          </div>\n\n          <Button\n            onClick={handleClick}\n            style={{\n              backgroundColor: \"#4F1699\",\n              padding: \".6rem 1.5rem\",\n              marginTop: \"1rem\",\n            }}\n          >\n            {data.placeholder}\n            {loading ? (\n              <div className=\"spinner-border spinner-border-sm spinner text-white ml-2\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n              </div>) : (\"\")\n            }\n          </Button>\n        </div>\n      </Modal>\n\n      <SuccessDialog \n        isOpen={error.state}\n        toggle={closeError}\n        title={error.message}\n        details={error.status}\n      /> \n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  userName: state?.user?.details?.admin?.fullname,\n  email: state?.user?.details?.admin?.email\n});\nexport default connect(mapStateToProps)(ReportsModal);\n","import { Transfer } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { Button } from \"reactstrap\";\nimport logo from \"../../../assets/img/icons/customercard.svg\";\nimport Modal from \"./Modal\";\nimport { Link } from \"react-router-dom\";\n\nconst CustomerDetails = ({ setShowCustomerDetails, details }) => {\n  const refund = {\n    title: `Refund Customer`,\n    reason: \"Refund Reason\",\n\n    placeholder: \"Initiate Refund\",\n  };\n  const reprocess = {\n    title: \"Reprocess Transaction\",\n    reason: \"Reprocess Reason\",\n    placeholder: \"Reprocess\",\n  };\n\n  const [modalDetail, setModalDetail] = useState(null);\n  const [show, setShow] = useState(false);\n  const [transId] = useState(details.transId);\n\n  const customerData = [\n    { \"Transaction Name\": details.transDomain },\n    { \"Savings Wallet\": details.fundSource },\n    { \"Wallet Name\": details.transType },\n    { \"Transaction Type\": details.transEntry },\n    // { \"Transaction Reference\": \"Debit\" },\n    { \"Created at\": details.transDate },\n    {\n      \"Customer ID\": (\n        <Link to={\"/customers/details/\" + details.customerId}>\n          <p className=\"name\">{details.customerId}</p>{\" \"}\n        </Link>\n      ),\n    },\n    { \"Customer Wallet ID\": details.transId },\n  ];\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  return (\n    <>\n      <div style={{ display: \"flex\", gap: \"10px\", padding: \"10px\" }}>\n        <span\n          style={{ color: \"#4f1699\", cursor: \"pointer\" }}\n          onClick={() => setShowCustomerDetails((prev) => !prev)}\n        >\n          All Saving Transactions\n        </span>\n        <span style={{ color: \"#304762\" }}>{\" > \"}</span>{\" \"}\n        <span style={{ color: \"#304762\" }}>Savings Transaction Details</span>\n      </div>\n      <div className=\"customer_card_body\">\n        <div className=\"flex\">\n          <div>\n            <div>\n              <h4 className=\"greeting\">\n                <img src={logo} className=\"\" alt=\"Settl Logo\" />\n                <span className=\"pl-2\">Savings Transaction Details </span>\n              </h4>\n              <div className=\"flex\">\n                <p className=\"price\">{`₦${details.transAmount}.00`}</p>\n                <p\n                  className={\n                    \"status \" +\n                    (details.transStatus === \"SUCCESS\"\n                      ? \"success\"\n                      : details.transStatus === \"REFUNDED\"\n                      ? \"registered\"\n                      : \"failed\")\n                  }\n                >\n                  {details.transStatus}\n                </p>\n              </div>\n            </div>\n          </div>\n          {details.transStatus === \"FAILED\" ? (\n            <div className=\"buttons\">\n              <Button\n                className=\"button_neutral\"\n                onClick={() => {\n                  setModalDetail(refund);\n                  setShow(true);\n                }}\n              >\n                Refund Customer\n              </Button>\n              <Button\n                className=\"button_approve\"\n                onClick={() => {\n                  setModalDetail(reprocess);\n                  setShow(true);\n                }}\n              >\n                Reprocess Transaction\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n        <div className=\"details\">\n          {customerData.map((info) => (\n            <div\n              style={{\n                display: \"flex\",\n              }}\n            >\n              <p\n                style={{\n                  width: \"50%\",\n                  color: \"rgba(48, 71, 98, 0.8)\",\n                }}\n              >\n                {Object.keys(info)}\n              </p>\n              <p\n                style={{\n                  width: \"50%\",\n                  color: \"#304762\",\n                  fontWeight: 500,\n                }}\n              >\n                {Object.values(info)}\n              </p>\n            </div>\n          ))}\n        </div>\n      </div>\n      {modalDetail && (\n        <Modal\n          show={show}\n          setShow={setShow}\n          data={modalDetail}\n          transId={transId}\n          // reload={setShowCustomerDetails(false)}\n        />\n      )}\n    </>\n  );\n};\nexport default CustomerDetails;\n"],"sourceRoot":""}