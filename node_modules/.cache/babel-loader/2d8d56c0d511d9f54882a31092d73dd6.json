{"ast":null,"code":"import _regeneratorRuntime from \"/Users/adebayooluyemi/Documents/THE BULB/UPDATED SETTL ADMIN BACKOFFICE /settl-backoffice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/adebayooluyemi/Documents/THE BULB/UPDATED SETTL ADMIN BACKOFFICE /settl-backoffice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nimport baseURL from \"./baseUrl\";\nimport { useSelector } from \"react-redux\";\n\nfunction create_UUID() {\n  var dt = new Date().getTime();\n  var uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = (dt + Math.random() * 16) % 16 | 0;\n    dt = Math.floor(dt / 16);\n    return (c === \"x\" ? r : r & 0x3 | 0x8).toString(16);\n  });\n  return uuid;\n}\n\nvar requestId = create_UUID();\n\nvar MessageRequest = function MessageRequest() {\n  var _useSelector = useSelector(function (state) {\n    return state.user.details;\n  }),\n      token = _useSelector.token,\n      tokenType = _useSelector.tokenType;\n\n  var getAllMessages = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              requestId = create_UUID();\n              _context.prev = 1;\n              _context.next = 4;\n              return axios.get(baseURL + \"backoffice/Messaging\", {\n                headers: {\n                  \"X-RequestId\": \"\".concat(requestId),\n                  Authorization: \"\".concat(tokenType, \" \").concat(token)\n                }\n              });\n\n            case 4:\n              response = _context.sent;\n              return _context.abrupt(\"return\", response.data);\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n              return _context.abrupt(\"return\", _context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 8]]);\n    }));\n\n    return function getAllMessages() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getMessageById = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              requestId = create_UUID();\n              _context2.prev = 1;\n              _context2.next = 4;\n              return axios.get(baseURL + \"backoffice/Messaging/\".concat(id), {\n                headers: {\n                  \"X-RequestId\": \"\".concat(requestId)\n                },\n                Authorization: \"\".concat(tokenType, \" \").concat(token)\n              });\n\n            case 4:\n              response = _context2.sent;\n              return _context2.abrupt(\"return\", response.data);\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](1);\n              return _context2.abrupt(\"return\", _context2.t0);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 8]]);\n    }));\n\n    return function getMessageById(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var getLogRecordsById = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(messageType, id) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              requestId = create_UUID();\n              _context3.prev = 1;\n              _context3.next = 4;\n              return axios.get(baseURL + \"backoffice​/Messaging​/getlogbyid_v2\", {\n                params: {\n                  Logtype: messageType,\n                  Id: id\n                },\n                headers: {\n                  \"X-RequestId\": \"\".concat(requestId),\n                  Authorization: \"\".concat(tokenType, \" \").concat(token)\n                }\n              });\n\n            case 4:\n              response = _context3.sent;\n              return _context3.abrupt(\"return\", response.data);\n\n            case 8:\n              _context3.prev = 8;\n              _context3.t0 = _context3[\"catch\"](1);\n              return _context3.abrupt(\"return\", _context3.t0);\n\n            case 11:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[1, 8]]);\n    }));\n\n    return function getLogRecordsById(_x2, _x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var newMessage = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(MessageTypes, Sender, MessageTitle, MessageDescription, Recipients, Customer, EmailCode) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              requestId = create_UUID();\n              _context4.prev = 1;\n              _context4.next = 4;\n              return axios.post(baseURL + \"backoffice/Messaging/CreateMessages_V2\", null, {\n                params: {\n                  MessageTypes: MessageTypes,\n                  Sender: Sender,\n                  MessageTitle: MessageTitle,\n                  MessageDescription: MessageDescription,\n                  Recipients: Recipients,\n                  Customer: Customer,\n                  EmailCode: EmailCode\n                },\n                headers: {\n                  \"X-RequestId\": \"\".concat(requestId),\n                  Authorization: \"\".concat(tokenType, \" \").concat(token)\n                }\n              });\n\n            case 4:\n              response = _context4.sent;\n              return _context4.abrupt(\"return\", response.data);\n\n            case 8:\n              _context4.prev = 8;\n              _context4.t0 = _context4[\"catch\"](1);\n              return _context4.abrupt(\"return\", _context4.t0);\n\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[1, 8]]);\n    }));\n\n    return function newMessage(_x4, _x5, _x6, _x7, _x8, _x9, _x10) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  return {\n    getAllMessages: getAllMessages,\n    getMessageById: getMessageById,\n    getLogRecordsById: getLogRecordsById,\n    newMessage: newMessage\n  };\n};\n\nexport default MessageRequest;","map":{"version":3,"sources":["/Users/adebayooluyemi/Documents/THE BULB/UPDATED SETTL ADMIN BACKOFFICE /settl-backoffice/src/requests/message.js"],"names":["axios","baseURL","useSelector","create_UUID","dt","Date","getTime","uuid","replace","c","r","Math","random","floor","toString","requestId","MessageRequest","state","user","details","token","tokenType","getAllMessages","get","headers","Authorization","response","data","getMessageById","id","getLogRecordsById","messageType","params","Logtype","Id","newMessage","MessageTypes","Sender","MessageTitle","MessageDescription","Recipients","Customer","EmailCode","post"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport baseURL from \"./baseUrl\";\nimport { useSelector } from \"react-redux\";\n\nfunction create_UUID() {\n  var dt = new Date().getTime();\n  var uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(\n    /[xy]/g,\n    function (c) {\n      var r = (dt + Math.random() * 16) % 16 | 0;\n      dt = Math.floor(dt / 16);\n      return (c === \"x\" ? r : (r & 0x3) | 0x8).toString(16);\n    }\n  );\n  return uuid;\n}\n\nlet requestId = create_UUID();\n\nconst MessageRequest = () => {\n  const { token, tokenType } = useSelector((state) => state.user.details);\n  const getAllMessages = async () => {\n    requestId = create_UUID();\n\n    try {\n      const response = await axios.get(baseURL + \"backoffice/Messaging\", {\n        headers: {\n          \"X-RequestId\": `${requestId}`,\n          Authorization: `${tokenType} ${token}`,\n        },\n      });\n      return response.data;\n    } catch (error) {\n      return error;\n    }\n  };\n\n  const getMessageById = async (id) => {\n    requestId = create_UUID();\n\n    try {\n      const response = await axios.get(baseURL + `backoffice/Messaging/${id}`, {\n        headers: { \"X-RequestId\": `${requestId}` },\n        Authorization: `${tokenType} ${token}`,\n      });\n      return response.data;\n    } catch (error) {\n      return error;\n    }\n  };\n\n  const getLogRecordsById = async (messageType, id) => {\n    requestId = create_UUID();\n\n    try {\n      const response = await axios.get(\n        baseURL + \"backoffice​/Messaging​/getlogbyid_v2\",\n        {\n          params: {\n            Logtype: messageType,\n            Id: id,\n          },\n          headers: {\n            \"X-RequestId\": `${requestId}`,\n            Authorization: `${tokenType} ${token}`,\n          },\n        }\n      );\n      return response.data;\n    } catch (error) {\n      return error;\n    }\n  };\n\n  const newMessage = async (\n    MessageTypes,\n    Sender,\n    MessageTitle,\n    MessageDescription,\n    Recipients,\n    Customer,\n    EmailCode\n  ) => {\n    requestId = create_UUID();\n\n    try {\n      const response = await axios.post(\n        baseURL + \"backoffice/Messaging/CreateMessages_V2\",\n        null,\n        {\n          params: {\n            MessageTypes,\n            Sender,\n            MessageTitle,\n            MessageDescription,\n            Recipients,\n            Customer,\n            EmailCode\n          },\n          headers: {\n            \"X-RequestId\": `${requestId}`,\n            Authorization: `${tokenType} ${token}`,\n          },\n        }\n      );\n      return response.data;\n    } catch (error) {\n      return error;\n    }\n  };\n\n  return {\n    getAllMessages,\n    getMessageById,\n    getLogRecordsById,\n    newMessage,\n  };\n};\n\nexport default MessageRequest;\n"]},"metadata":{},"sourceType":"module"}