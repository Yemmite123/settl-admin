{"ast":null,"code":"import React from\"react\";import{Col,Container,Row}from\"reactstrap\";import Code from\"../../components/Code\";var Context=function Context(){return/*#__PURE__*/React.createElement(\"div\",{id:\"context-api\",className:\"mb-5\"},/*#__PURE__*/React.createElement(\"h3\",null,\"Context API\"),/*#__PURE__*/React.createElement(\"p\",{className:\"text-lg\"},\"Context provides a way to pass data through the component tree without having to pass props down manually at every level.\"),/*#__PURE__*/React.createElement(\"p\",{className:\"text-lg\"},\"In a typical React application, data is passed top-down (parent to child) via props, but this can be cumbersome for certain types of props (e.g. locale preference, UI theme) that are required by many components within an application. Context provides a way to share values like these between components without having to explicitly pass a prop through every level of the tree.\",\" \",/*#__PURE__*/React.createElement(\"a\",{href:\"https://reactjs.org/docs/context.html\",target:\"_blank\",rel:\"noopener noreferrer\"},\"Learn more\"),\".\"));};var Redux=function Redux(){return/*#__PURE__*/React.createElement(\"div\",{id:\"redux\",className:\"mb-5\"},/*#__PURE__*/React.createElement(\"h3\",null,\"Redux\"),/*#__PURE__*/React.createElement(\"p\",{className:\"text-lg\"},\"Redux is a predictable state container for JavaScript apps.\"),/*#__PURE__*/React.createElement(\"p\",{className:\"text-lg\"},\"It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test. On top of that, it provides a great developer experience, such as\",\" \",/*#__PURE__*/React.createElement(\"a\",{href:\"https://github.com/reduxjs/redux-devtools\",target:\"_blank\",rel:\"noopener noreferrer\"},\"live code editing combined with a time traveling debugger\"),\".\"),/*#__PURE__*/React.createElement(\"p\",{className:\"text-lg\"},/*#__PURE__*/React.createElement(\"a\",{href:\"https://redux.js.org/introduction/getting-started\",target:\"_blank\",rel:\"noopener noreferrer\"},\"Learn more about Redux \\xBB\"),\".\"));};var ReduxActions=function ReduxActions(){return/*#__PURE__*/React.createElement(\"div\",{id:\"actions\",className:\"mb-5\"},/*#__PURE__*/React.createElement(\"h4\",null,\"Actions\"),/*#__PURE__*/React.createElement(\"p\",{className:\"text-lg\"},\"Actions are payloads of information that send data from your application to your store. They are the only source of information for the store. Here's an example action which represents adding a new todo item:\"),/*#__PURE__*/React.createElement(\"p\",{className:\"text-lg\"},/*#__PURE__*/React.createElement(\"code\",null,\"redux/constants.js\")),/*#__PURE__*/React.createElement(Code,null,\"const ADD_TODO = 'ADD_TODO'\"),/*#__PURE__*/React.createElement(\"p\",{className:\"text-lg\"},/*#__PURE__*/React.createElement(\"code\",null,\"redux/actions/todoActions.js\")),/*#__PURE__*/React.createElement(Code,null,\"import * as types from '../constants';\\n\\nexport function addTodo(value) {\\n  return {\\n    type: types.ADD_TODO,\\n    payload: value\\n  }\\n}\"),/*#__PURE__*/React.createElement(\"p\",{className:\"text-lg\"},\"How to dispatch an action:\"),/*#__PURE__*/React.createElement(Code,null,\"import { useDispatch } from 'react-redux';\\nimport { addTodo } from '../redux/actions/todoActions';\\n\\nconst DemoComponent = function() {\\n  const dispatch = useDispatch();\\n\\n  return (\\n    <Button onClick={() => dispatch(addTodo('My first todo item'))}>Click me!</Button>\\n  )\\n}\"));};var ReduxReducers=function ReduxReducers(){return/*#__PURE__*/React.createElement(\"div\",{id:\"reducers\",className:\"mb-5\"},/*#__PURE__*/React.createElement(\"h4\",null,\"Reducers\"),/*#__PURE__*/React.createElement(\"p\",{className:\"text-lg\"},\"Reducers specify how the application's state changes in response to actions sent to the store. Remember that actions only describe what happened, but don't describe how the application's state changes.\"),/*#__PURE__*/React.createElement(\"p\",{className:\"text-lg\"},/*#__PURE__*/React.createElement(\"code\",null,\"redux/reducers/todoReducer.js\")),/*#__PURE__*/React.createElement(Code,null,\"import * as types from '../constants';\\n\\nconst initialState = [\\n  {\\n    text: \\\"Initial todo item\\\",\\n    completed: true\\n  }\\n]\\n\\nexport default function reducer(state = initialState, actions) {\\n  switch (actions.type) {\\n\\n    case types.ADD_TODO:\\n      return [\\n        ...state,\\n        {\\n          text: actions.payload,\\n          completed: false\\n        }\\n      ]\\n\\n    default:\\n      return state\\n  }\\n}\"),/*#__PURE__*/React.createElement(\"p\",{className:\"text-lg\"},\"Note: Reducers can be registered by adding them to the array in the\",\" \",/*#__PURE__*/React.createElement(\"code\",null,\"redux/reducers/index.js\"),\" file.\"));};var ReduxStore=function ReduxStore(){return/*#__PURE__*/React.createElement(\"div\",{id:\"store\",className:\"mb-5\"},/*#__PURE__*/React.createElement(\"h4\",null,\"Store\"),/*#__PURE__*/React.createElement(\"p\",{className:\"text-lg\"},\"In the previous sections, we defined the actions that represent the facts about \\u201Cwhat happened\\u201D and the reducers that update the state according to those actions. The Store is the object that brings them together.\"),/*#__PURE__*/React.createElement(\"p\",{className:\"text-lg\"},\"It's important to note that you'll only have a single store in a Redux application. When you want to split your data handling logic, you'll use\",\" \",/*#__PURE__*/React.createElement(\"a\",{href:\"https://redux.js.org/basics/reducers#splitting-reducers\",target:\"_blank\",rel:\"noopener noreferrer\"},\"reducer composition\"),\" \",\"instead of many stores.\"),/*#__PURE__*/React.createElement(\"p\",{className:\"text-lg\"},\"Demo component showing values from the store:\"),/*#__PURE__*/React.createElement(Code,null,\"import { connect } from 'react-redux';\\n\\nconst DemoComponent = ({ todos }) => (\\n  <ul>\\n    { todos.map((todo) => <li>{todo}</li>) }\\n  </ul>\\n)\\n\\nexport default connect(store => ({ todos: store.todoReducer }))(DemoComponent);\"));};var StateManagement=function StateManagement(){return/*#__PURE__*/React.createElement(Container,{fluid:true,className:\"p-0\"},/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{lg:10,xl:8,className:\"mx-auto\"},/*#__PURE__*/React.createElement(\"h1\",{className:\"h3\"},\"State Management\"),/*#__PURE__*/React.createElement(\"hr\",{className:\"my-4\"}),/*#__PURE__*/React.createElement(Context,null),/*#__PURE__*/React.createElement(Redux,null),/*#__PURE__*/React.createElement(ReduxActions,null),/*#__PURE__*/React.createElement(ReduxReducers,null),/*#__PURE__*/React.createElement(ReduxStore,null))));};export default StateManagement;","map":{"version":3,"sources":["/Users/adebayooluyemi/Documents/THE BULB/UPDATED SETTL ADMIN BACKOFFICE /settl-backoffice/src/pages/docs/StateManagement.js"],"names":["React","Col","Container","Row","Code","Context","Redux","ReduxActions","ReduxReducers","ReduxStore","StateManagement"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Col,\r\n  Container,\r\n  Row\r\n} from \"reactstrap\";\r\n\r\nimport Code from \"../../components/Code\";\r\n\r\nconst Context = () => (\r\n  <div id=\"context-api\" className=\"mb-5\">\r\n    <h3>Context API</h3>\r\n    <p className=\"text-lg\">\r\n      Context provides a way to pass data through the component tree without \r\n      having to pass props down manually at every level.\r\n    </p>\r\n\r\n    <p className=\"text-lg\">\r\n      In a typical React application, data is passed top-down (parent to child) \r\n      via props, but this can be cumbersome for certain types of props (e.g. \r\n      locale preference, UI theme) that are required by many components within \r\n      an application. Context provides a way to share values like these between \r\n      components without having to explicitly pass a prop through every level \r\n      of the tree.{\" \"}\r\n      <a href=\"https://reactjs.org/docs/context.html\" target=\"_blank\" rel=\"noopener noreferrer\">Learn more</a>.\r\n    </p>\r\n  </div>\r\n);\r\n\r\nconst Redux = () => (\r\n  <div id=\"redux\" className=\"mb-5\">\r\n    <h3>Redux</h3>\r\n    <p className=\"text-lg\">\r\n      Redux is a predictable state container for JavaScript apps.\r\n    </p>\r\n\r\n    <p className=\"text-lg\">\r\n      It helps you write applications that behave consistently, run in \r\n      different environments (client, server, and native), and are easy to \r\n      test. On top of that, it provides a great developer experience, such \r\n      as{\" \"}\r\n      <a href=\"https://github.com/reduxjs/redux-devtools\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n        live code editing combined with a time traveling debugger\r\n      </a>.\r\n    </p>\r\n\r\n    <p className=\"text-lg\">\r\n      <a href=\"https://redux.js.org/introduction/getting-started\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n        Learn more about Redux »\r\n      </a>.\r\n    </p>\r\n  </div>\r\n);\r\n\r\nconst ReduxActions = () => (\r\n  <div id=\"actions\" className=\"mb-5\">\r\n    <h4>Actions</h4>\r\n    <p className=\"text-lg\">\r\n      Actions are payloads of information that send data from your application \r\n      to your store. They are the only source of information for the store. \r\n      Here's an example action which represents adding a new todo item:\r\n    </p>\r\n\r\n    <p className=\"text-lg\">\r\n      <code>redux/constants.js</code>\r\n    </p>\r\n    <Code>const ADD_TODO = 'ADD_TODO'</Code>\r\n\r\n    <p className=\"text-lg\">\r\n      <code>redux/actions/todoActions.js</code>\r\n    </p>\r\n    <Code>{`import * as types from '../constants';\r\n\r\nexport function addTodo(value) {\r\n  return {\r\n    type: types.ADD_TODO,\r\n    payload: value\r\n  }\r\n}`}</Code>\r\n\r\n    <p className=\"text-lg\">\r\n      How to dispatch an action:\r\n    </p>\r\n\r\n    <Code>{`import { useDispatch } from 'react-redux';\r\nimport { addTodo } from '../redux/actions/todoActions';\r\n\r\nconst DemoComponent = function() {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Button onClick={() => dispatch(addTodo('My first todo item'))}>Click me!</Button>\r\n  )\r\n}`}</Code>\r\n  </div>\r\n);\r\n\r\nconst ReduxReducers = () => (\r\n  <div id=\"reducers\" className=\"mb-5\">\r\n    <h4>Reducers</h4>\r\n    <p className=\"text-lg\">\r\n      Reducers specify how the application's state changes in response to actions \r\n      sent to the store. Remember that actions only describe what happened, but \r\n      don't describe how the application's state changes.\r\n    </p>\r\n\r\n    <p className=\"text-lg\">\r\n      <code>redux/reducers/todoReducer.js</code>\r\n    </p>\r\n    <Code>{`import * as types from '../constants';\r\n\r\nconst initialState = [\r\n  {\r\n    text: \"Initial todo item\",\r\n    completed: true\r\n  }\r\n]\r\n\r\nexport default function reducer(state = initialState, actions) {\r\n  switch (actions.type) {\r\n\r\n    case types.ADD_TODO:\r\n      return [\r\n        ...state,\r\n        {\r\n          text: actions.payload,\r\n          completed: false\r\n        }\r\n      ]\r\n\r\n    default:\r\n      return state\r\n  }\r\n}`}</Code>\r\n\r\n    <p className=\"text-lg\">\r\n      Note: Reducers can be registered by adding them to the array in the{\" \"}\r\n      <code>redux/reducers/index.js</code> file.\r\n    </p>\r\n  </div>\r\n);\r\n\r\nconst ReduxStore = () => (\r\n  <div id=\"store\" className=\"mb-5\">\r\n    <h4>Store</h4>\r\n    <p className=\"text-lg\">\r\n      In the previous sections, we defined the actions that represent the facts \r\n      about “what happened” and the reducers that update the state according to \r\n      those actions. The Store is the object that brings them together.\r\n    </p>\r\n\r\n    <p className=\"text-lg\">\r\n      It's important to note that you'll only have a single store in a Redux \r\n      application. When you want to split your data handling logic, you'll use{\" \"}\r\n      <a href=\"https://redux.js.org/basics/reducers#splitting-reducers\" target=\"_blank\" rel=\"noopener noreferrer\">reducer composition</a>{\" \"}\r\n      instead of many stores.\r\n    </p>\r\n\r\n    <p className=\"text-lg\">\r\n      Demo component showing values from the store:\r\n    </p>\r\n    <Code>{`import { connect } from 'react-redux';\r\n\r\nconst DemoComponent = ({ todos }) => (\r\n  <ul>\r\n    { todos.map((todo) => <li>{todo}</li>) }\r\n  </ul>\r\n)\r\n\r\nexport default connect(store => ({ todos: store.todoReducer }))(DemoComponent);`}</Code>\r\n  </div>\r\n);\r\n\r\nconst StateManagement = () => (\r\n  <Container fluid className=\"p-0\">\r\n    <Row>\r\n      <Col lg={10} xl={8} className=\"mx-auto\">\r\n        <h1 className=\"h3\">State Management</h1>\r\n        <hr className=\"my-4\" />\r\n        <Context />\r\n        <Redux />\r\n        <ReduxActions />\r\n        <ReduxReducers />\r\n        <ReduxStore />\r\n      </Col>\r\n    </Row>\r\n  </Container>\r\n);\r\n\r\nexport default StateManagement;\r\n"]},"metadata":{},"sourceType":"module"}