{"ast":null,"code":"import _regeneratorRuntime from \"/Users/adebayooluyemi/Documents/THE BULB/UPDATED SETTL ADMIN BACKOFFICE /OLUYEMI SETTL TESTING FOR ADMIN/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/adebayooluyemi/Documents/THE BULB/UPDATED SETTL ADMIN BACKOFFICE /OLUYEMI SETTL TESTING FOR ADMIN/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/adebayooluyemi/Documents/THE BULB/UPDATED SETTL ADMIN BACKOFFICE /OLUYEMI SETTL TESTING FOR ADMIN/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/adebayooluyemi/Documents/THE BULB/UPDATED SETTL ADMIN BACKOFFICE /OLUYEMI SETTL TESTING FOR ADMIN/src/contexts/AdminContext.js\";\nimport React, { useContext, useState, useEffect, createContext } from \"react\";\nimport adminRequest from \"../requests/admin\";\nvar APIContext = createContext();\nexport function APIContextProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      adminData = _useState2[0],\n      setAdminData = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      updateAdmin = _useState4[0],\n      setUpdateAdmin = _useState4[1];\n\n  var _adminRequest = adminRequest(),\n      getAllAdmin = _adminRequest.getAllAdmin;\n\n  var getRecentAdminList = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return getAllAdmin();\n\n            case 2:\n              response = _context.sent;\n\n              if (response.code === \"00\") {\n                console.log(response.data);\n                setAdminData(response.data);\n                setUpdateAdmin(false);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getRecentAdminList() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var changeUpdateStatus = function changeUpdateStatus() {\n    setUpdateAdmin(true);\n  };\n\n  useEffect(function () {\n    getRecentAdminList();\n  }, [updateAdmin]);\n  return (\n    /*#__PURE__*/\n    // Add required values to the value prop within an object\n    React.createElement(APIContext.Provider, {\n      value: {\n        adminData: adminData,\n        changeUpdateStatus: changeUpdateStatus\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 5\n      }\n    }, children)\n  );\n} // Create a hook to use the APIContext, this is a Kent C. Dodds pattern\n\nexport function useAPI() {\n  var context = useContext(APIContext);\n\n  if (context === undefined) {\n    throw new Error(\"Context must be used within a Provider\");\n  }\n\n  return context;\n}","map":{"version":3,"sources":["/Users/adebayooluyemi/Documents/THE BULB/UPDATED SETTL ADMIN BACKOFFICE /OLUYEMI SETTL TESTING FOR ADMIN/src/contexts/AdminContext.js"],"names":["React","useContext","useState","useEffect","createContext","adminRequest","APIContext","APIContextProvider","children","adminData","setAdminData","updateAdmin","setUpdateAdmin","getAllAdmin","getRecentAdminList","response","code","console","log","data","changeUpdateStatus","useAPI","context","undefined","Error"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,EAAiDC,aAAjD,QAAsE,OAAtE;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AAEA,IAAMC,UAAU,GAAGF,aAAa,EAAhC;AAEA,OAAO,SAASG,kBAAT,OAA0C;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AAC/C,kBAAkCN,QAAQ,CAAC,EAAD,CAA1C;AAAA;AAAA,MAAOO,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAAsCR,QAAQ,CAAC,IAAD,CAA9C;AAAA;AAAA,MAAOS,WAAP;AAAA,MAAoBC,cAApB;;AACA,sBAAwBP,YAAY,EAApC;AAAA,MAAQQ,WAAR,iBAAQA,WAAR;;AAEA,MAAMC,kBAAkB;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACFD,WAAW,EADT;;AAAA;AACnBE,cAAAA,QADmB;;AAEzB,kBAAIA,QAAQ,CAACC,IAAT,KAAkB,IAAtB,EAA4B;AAC1BC,gBAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,IAArB;AACAT,gBAAAA,YAAY,CAACK,QAAQ,CAACI,IAAV,CAAZ;AACAP,gBAAAA,cAAc,CAAC,KAAD,CAAd;AACD;;AANwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAlBE,kBAAkB;AAAA;AAAA;AAAA,KAAxB;;AASA,MAAMM,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/BR,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD,GAFD;;AAGAT,EAAAA,SAAS,CAAC,YAAM;AACdW,IAAAA,kBAAkB;AACnB,GAFQ,EAEN,CAACH,WAAD,CAFM,CAAT;AAIA;AAAA;AACE;AACA,wBAAC,UAAD,CAAY,QAAZ;AAAqB,MAAA,KAAK,EAAE;AAAEF,QAAAA,SAAS,EAATA,SAAF;AAAaW,QAAAA,kBAAkB,EAAlBA;AAAb,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGZ,QADH;AAFF;AAMD,C,CAED;;AACA,OAAO,SAASa,MAAT,GAAkB;AACvB,MAAMC,OAAO,GAAGrB,UAAU,CAACK,UAAD,CAA1B;;AACA,MAAIgB,OAAO,KAAKC,SAAhB,EAA2B;AACzB,UAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACD;;AACD,SAAOF,OAAP;AACD","sourcesContent":["import React, { useContext, useState, useEffect, createContext } from \"react\";\nimport adminRequest from \"../requests/admin\";\n\nconst APIContext = createContext();\n\nexport function APIContextProvider({ children }) {\n  const [adminData, setAdminData] = useState([]);\n  const [updateAdmin, setUpdateAdmin] = useState(true);\n  const { getAllAdmin } = adminRequest();\n\n  const getRecentAdminList = async () => {\n    const response = await getAllAdmin();\n    if (response.code === \"00\") {\n      console.log(response.data);\n      setAdminData(response.data);\n      setUpdateAdmin(false);\n    }\n  };\n\n  const changeUpdateStatus = () => {\n    setUpdateAdmin(true);\n  };\n  useEffect(() => {\n    getRecentAdminList();\n  }, [updateAdmin]);\n\n  return (\n    // Add required values to the value prop within an object\n    <APIContext.Provider value={{ adminData, changeUpdateStatus }}>\n      {children}\n    </APIContext.Provider>\n  );\n}\n\n// Create a hook to use the APIContext, this is a Kent C. Dodds pattern\nexport function useAPI() {\n  const context = useContext(APIContext);\n  if (context === undefined) {\n    throw new Error(\"Context must be used within a Provider\");\n  }\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}